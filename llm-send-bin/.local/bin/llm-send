#!/usr/bin/env bash
set -euo pipefail

# Get AI_PANE from window-scoped tmux user option
# Use $TMUX_PANE to determine current window
AI_PANE=""
if [ -n "${TMUX_PANE:-}" ]; then
  # Get session and window from current pane
  _session=$(tmux display-message -t "${TMUX_PANE}" -p '#S' 2>/dev/null)
  _window=$(tmux display-message -t "${TMUX_PANE}" -p '#I' 2>/dev/null)

  if [ -n "$_session" ] && [ -n "$_window" ]; then
    # Retrieve window-scoped user option
    AI_PANE=$(tmux show-option -wv -t "$_session:$_window" @AI_PANE 2>/dev/null)
  fi
fi

# Fallback to next pane if still not set
TARGET="${AI_PANE:-:.+}"

# Read content from file arg or stdin
CONTENT=""
if [[ $# -gt 0 ]]; then
  CONTENT=$(cat "$1")
else
  CONTENT=$(cat -)
fi

# Construct complete message with markers and content as single string
# This avoids sending intermediate Enter keypresses that might trigger submission
TIMESTAMP=$(date +'%F %T')
COMPLETE_MESSAGE="### PROMPT ${TIMESTAMP}

${CONTENT}

### END PROMPT"

# Load the complete message into tmux buffer
echo "$COMPLETE_MESSAGE" | tmux load-buffer -

# Get buffer size to determine if we need a delay
BUFFER_SIZE=$(tmux show-buffer | wc -c)

# CRITICAL: Exit copy-mode if pane is scrolled up
# This ensures send-keys go to the application, not copy-mode navigation
tmux send-keys -t "$TARGET" -X cancel 2>/dev/null || true

# Paste the complete message (all newlines are part of the paste, not keypresses)
tmux paste-buffer -t "$TARGET"

# For large pastes, add a delay before sending Enter
# This gives the TUI time to process the pasted content
if [ "$BUFFER_SIZE" -gt 1000 ]; then
  sleep 0.5
fi

# Send single Enter to submit the prompt
tmux send-keys -t "$TARGET" Enter
