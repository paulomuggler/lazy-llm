#!/usr/bin/env bash
set -euo pipefail

# Get AI_PANE from tmux environment if not already set in shell
if [ -z "${AI_PANE:-}" ]; then
  # Get current tmux session
  CURRENT_SESSION=$(tmux display-message -p '#S' 2>/dev/null || echo "")

  if [ -n "$CURRENT_SESSION" ]; then
    # Try session-specific environment first
    AI_PANE=$(tmux show-environment -t "$CURRENT_SESSION" AI_PANE 2>/dev/null | cut -d= -f2- || echo "")
  fi

  # Fallback to global environment
  if [ -z "$AI_PANE" ]; then
    AI_PANE=$(tmux show-environment -g AI_PANE 2>/dev/null | cut -d= -f2- || echo "")
  fi
fi

# Fallback to next pane if still not set
TARGET="${AI_PANE:-:.+}"

# Debug: log the target pane (comment out after debugging)
# echo "Targeting pane: $TARGET" >&2

# Read content from file arg or stdin
CONTENT=""
if [[ $# -gt 0 ]]; then
  CONTENT=$(cat "$1")
else
  CONTENT=$(cat -)
fi

# Construct complete message with markers and content as single string
# This avoids sending intermediate Enter keypresses that might trigger submission
TIMESTAMP=$(date +'%F %T')
COMPLETE_MESSAGE="### PROMPT ${TIMESTAMP}

${CONTENT}

### END PROMPT"

# Load the complete message into tmux buffer
echo "$COMPLETE_MESSAGE" | tmux load-buffer -

# Get buffer size to determine if we need a delay
BUFFER_SIZE=$(tmux show-buffer | wc -c)

# CRITICAL: Exit copy-mode if pane is scrolled up
# This ensures send-keys go to the application, not copy-mode navigation
tmux send-keys -t "$TARGET" -X cancel 2>/dev/null || true

# Paste the complete message (all newlines are part of the paste, not keypresses)
tmux paste-buffer -t "$TARGET"

# For large pastes, add a delay before sending Enter
# This gives the TUI time to process the pasted content
if [ "$BUFFER_SIZE" -gt 1000 ]; then
  sleep 0.5
fi

# Send single Enter to submit the prompt
tmux send-keys -t "$TARGET" Enter
